import { expect, test } from 'vitest'
import { toSemverRange } from './index'

test('it should work for semver greater than or equal to', () => {
  let semverRegexStr = toSemverRange({ major: 0, minor: 0, patch: 0 })
  let semverRegex = new RegExp('^' + semverRegexStr + '$')
  expect(semverRegex.test('0.0.0')).toBe(true)
  expect(semverRegex.test('0.0.1')).toBe(true)
  expect(semverRegex.test('0.1.1')).toBe(true)
  expect(semverRegex.test('1.1.1')).toBe(true)
  expect(semverRegex.test('12.12.123')).toBe(true)

  semverRegexStr = toSemverRange({ major: 0, minor: 0, patch: 5 })
  semverRegex = new RegExp('^' + semverRegexStr + '$')
  expect(semverRegex.test('0.0.0')).toBe(false)
  expect(semverRegex.test('0.0.1')).toBe(false)
  expect(semverRegex.test('0.0.5')).toBe(true)
  expect(semverRegex.test('0.1.1')).toBe(true)
  expect(semverRegex.test('1.1.1')).toBe(true)
  expect(semverRegex.test('12.12.123')).toBe(true)

  semverRegexStr = toSemverRange({ major: 23, minor: 19, patch: 0 })
  semverRegex = new RegExp('^' + semverRegexStr + '$')
  expect(semverRegex.test('0.0.0')).toBe(false)
  expect(semverRegex.test('0.0.1')).toBe(false)
  expect(semverRegex.test('0.0.5')).toBe(false)
  expect(semverRegex.test('0.1.1')).toBe(false)
  expect(semverRegex.test('1.1.1')).toBe(false)
  expect(semverRegex.test('12.12.123')).toBe(false)
  expect(semverRegex.test('23.19.0')).toBe(true)
  expect(semverRegex.test('24.0.0')).toBe(true)
  expect(semverRegex.test('24.0.1')).toBe(true)
  expect(semverRegex.test('24.1.0')).toBe(true)
})

test('it should work for semver greater than and less than', () => {
  let semverRegexStr = toSemverRange({ major: 0, minor: 0, patch: 0 }, { major: 1, minor: 0, patch: 0 })
  let semverRegex = new RegExp('^' + semverRegexStr + '$')
  expect(semverRegex.test('0.0.0')).toBe(true)
  expect(semverRegex.test('0.0.1')).toBe(true)
  expect(semverRegex.test('0.1.1')).toBe(true)
  expect(semverRegex.test('1.0.0')).toBe(false)
  expect(semverRegex.test('1.1.1')).toBe(false)
  expect(semverRegex.test('12.12.123')).toBe(false)

  semverRegexStr = toSemverRange({ major: 0, minor: 0, patch: 5 }, { major: 0, minor: 0, patch: 8 })
  semverRegex = new RegExp('^' + semverRegexStr + '$')
  expect(semverRegex.test('0.0.0')).toBe(false)
  expect(semverRegex.test('0.0.1')).toBe(false)
  expect(semverRegex.test('0.0.5')).toBe(true)
  expect(semverRegex.test('0.0.6')).toBe(true)
  expect(semverRegex.test('0.0.7')).toBe(true)
  expect(semverRegex.test('0.0.8')).toBe(false)
  expect(semverRegex.test('0.1.1')).toBe(false)
  expect(semverRegex.test('1.1.1')).toBe(false)
  expect(semverRegex.test('12.12.123')).toBe(false)

  semverRegexStr = toSemverRange({ major: 23, minor: 17, patch: 0 }, { major: 24, minor: 0, patch: 0 })
  semverRegex = new RegExp('^' + semverRegexStr + '$')
  expect(semverRegex.test('0.0.0')).toBe(false)
  expect(semverRegex.test('0.0.1')).toBe(false)
  expect(semverRegex.test('0.0.5')).toBe(false)
  expect(semverRegex.test('0.1.1')).toBe(false)
  expect(semverRegex.test('1.1.1')).toBe(false)
  expect(semverRegex.test('12.12.123')).toBe(false)
  expect(semverRegex.test('23.19.0')).toBe(true)
  expect(semverRegex.test('23.20.0')).toBe(true)
  expect(semverRegex.test('23.20.1')).toBe(true)
  expect(semverRegex.test('24.0.0')).toBe(false)
  expect(semverRegex.test('24.0.1')).toBe(false)
  expect(semverRegex.test('24.1.0')).toBe(false)
})

test('it should currently handle version numbers less significant than the patch version (non-standard)', () => {
  let semverRegexStr = toSemverRange({ major: 0, minor: 0, patch: 0 }, { major: 1, minor: 0, patch: 0 })
  let semverRegex = new RegExp('^' + semverRegexStr + '$')
  expect(semverRegex.test('0.0.0.0.0.0')).toBe(true)
  expect(semverRegex.test('0.0.0.0.0.1')).toBe(true)
  expect(semverRegex.test('0.1.0.0.0.1')).toBe(true)
  expect(semverRegex.test('1.0.0.0')).toBe(false)
  expect(semverRegex.test('1.0.0.1')).toBe(false)

  semverRegexStr = toSemverRange({ major: 23, minor: 19, patch: 0 })
  semverRegex = new RegExp('^' + semverRegexStr + '$')
  expect(semverRegex.test('23.19.0')).toBe(true)
  expect(semverRegex.test('23.19.0.567')).toBe(true)
  expect(semverRegex.test('23.18.0.567')).toBe(false)
})

test('it not match any non valid strings', () => {
  let semverRegexStr = toSemverRange({ major: 0, minor: 0, patch: 0 }, { major: 1, minor: 0, patch: 0 })
  let semverRegex = new RegExp('^' + semverRegexStr + '$')
  expect(semverRegex.test('0')).toBe(false)
  expect(semverRegex.test('0.0')).toBe(false)
  expect(semverRegex.test('hello')).toBe(false)
  expect(semverRegex.test('!@#&^*')).toBe(false)

  semverRegexStr = toSemverRange({ major: 23, minor: 19, patch: 0 })
  semverRegex = new RegExp('^' + semverRegexStr + '$')
  expect(semverRegex.test('0')).toBe(false)
  expect(semverRegex.test('0.0')).toBe(false)
  expect(semverRegex.test('hello')).toBe(false)
  expect(semverRegex.test('!@#&^*')).toBe(false)
})
